<?php
namespace Geissler\Converter\Standard\CSL;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-05 at 21:23:33.
 */
class ParserTest extends \PHPUnit\Framework\TestCase
{
    /**
     * @var Parser
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Parser;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Geissler\Converter\Standard\CSL\Parser::parse
     * @covers Geissler\Converter\Standard\CSL\Parser::createPerson
     * @covers Geissler\Converter\Standard\CSL\Parser::createDate
     * @covers Geissler\Converter\Standard\CSL\Parser::retrieve
     * @dataProvider dataProviderParse
     */
    public function testParse($csl, $authors, $dates, $books, $titles)
    {
        $this->assertTrue($this->object->parse($csl));
        $entries    =   $this->object->retrieve();
        $inner  =   0;
        foreach ($entries as $entry) {
            /** @var $entry \Geissler\Converter\Model\Entry */
            $position = 0;
            foreach ($entry->getAuthor() as $author) {
                /** @var $author \Geissler\Converter\Model\Person */
                $this->assertEquals($authors[$inner][$position], $author->getFamily());
                $position++;
            }

            foreach ($entry->getIssued() as $date) {
                /** @var $date \Geissler\Converter\Model\Date */
                $this->assertEquals($dates[$inner], $date->getYear());
            }

            $this->assertEquals($books[$inner], $entry->getType()->getType());
            $this->assertEquals($titles[$inner], $entry->getTitle());

            $inner++;
        }
    }

    public function dataProviderParse()
    {
        return array(
            array(
                '[
    {
        "author": [
            {
                "family": "Roe",
                "given": "Jane"
            },
            {
                "family": "Doe",
                "given": "John"
            },
            {
                "family": "Smith",
                "given": "John"
            }
        ],
        "issued": {
          "date-parts": [
            [1995]
          ]
        },
        "id": "ITEM-1",
        "type": "book",
        "page-first": "123",
        "page" : "20-45"
    },
    {
        "author": [
            {
                "family": "Roe",
                "given": "Jane"
            },
            {
                "family": "Noakes",
                "given": "Richard"
            },
            {
                "family": "Brown",
                "given": "Bob"
            }
        ],
        "issued": {
          "date-parts": [
            [1995]
          ]
        },
        "id": "ITEM-2",
        "type": "book"
    }
]',
                array(
                    array('Roe', 'Doe', 'Smith'),
                    array('Roe', 'Noakes', 'Brown')
                ),
                array(
                    1995, 1995
                ),
                array(
                    'book', 'book'
                ),
                array('', '')
            ),
            array(
                '[
          {
              "id": "ITEM-1",
              "author" : [
                 {
                    "family": "Wallace-Hadrill",
                    "given": "Andrew"
                 }
              ],
              "issued": {
                  "date-parts": [
                      [
                          "2011"
                      ]
                  ]
              },
              "title": "The monumental centre of Herculaneum. In search of the identities of the public buildings",
              "container-title" : "Journal of Roman Archaeology",
              "volume" : "24",
              "page" : "121-160",
              "original-publisher-place" : "Ann Arbor, Mich.",
              "type": "article-journal"
          }
    ]',
                array(
                    array('Wallace-Hadrill')
                ),
                array(
                    '2011'
                ),
                array(
                    'articleJournal'
                ),
                array('The monumental centre of Herculaneum. In search of the identities of the public buildings')
            ),
            array(
                '[
    {
        "author": [
            {
                "family": "Άγρας",
                "given": "Τέλλος"
            }
        ],
        "translator": [
            {
                "family": "Dimitriadis",
                "given": "Andreas"
            }
        ],
        "editor": [
            {
                "family": "Σαββίδης",
                "given": "Γ. Π."
            }
        ],
        "container-author": [
            {
                "family": "Καρυωτάκης ",
                "given": "Κώστας"
            }
        ],
        "id": "ITEM-1",
        "issued": {
            "date-parts": [
                [
                    "1998",
                    "12",
                    "24"
                ]
            ]
        },
        "title": "Ο Καρυωτάκης και οι Σάτιρες",
         "container-title":"Ποιήματα και πεζά",
        "type": "chapter"
    }
]',
                array(
                    array('Άγρας')
                ),
                array('1998'),
                array('chapter'),
                array('Ο Καρυωτάκης και οι Σάτιρες')
            )
        );
    }

    /**
     * @covers Geissler\Converter\Standard\CSL\Parser::retrieve
     * 
     * @expectedException ErrorException
     */
    public function testDoNotRetrieve()
    {
        $this->assertFalse($this->object->parse(''));
        $this->object->retrieve();
    }
}
