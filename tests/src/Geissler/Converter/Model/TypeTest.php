<?php
namespace Geissler\Converter\Model;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-05 at 13:20:24.
 */
class TypeTest extends \PHPUnit\Framework\TestCase
{
    /**
     * @var Type
     */
    protected $object;
    protected $class = '\Geissler\Converter\Model\Type';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Type;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Geissler\Converter\Model\Type::setAbstract
     */
    public function testSetAbstract()
    {
        $this->assertInstanceOf($this->class, $this->object->setAbstract());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setArticle
     */
    public function testSetArticle()
    {
        $this->assertInstanceOf($this->class, $this->object->setArticle());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setArticleJournal
     * 
     */
    public function testSetArticleJournal()
    {
        $this->assertInstanceOf($this->class, $this->object->setArticleJournal());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setArticleMagazine
     * 
     */
    public function testSetArticleMagazine()
    {
        $this->assertInstanceOf($this->class, $this->object->setArticleMagazine());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setArticleNewspaper
     * 
     */
    public function testSetArticleNewspaper()
    {
        $this->assertInstanceOf($this->class, $this->object->setArticleNewspaper());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setBill
     * 
     */
    public function testSetBill()
    {
        $this->assertInstanceOf($this->class, $this->object->setBill());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setBook
     * 
     */
    public function testSetBook()
    {
        $this->assertInstanceOf($this->class, $this->object->setBook());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setBroadcast
     * 
     */
    public function testSetBroadcast()
    {
        $this->assertInstanceOf($this->class, $this->object->setBroadcast());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setCatalog
     *
     */
    public function testSetCatalog()
    {
        $this->assertInstanceOf($this->class, $this->object->setCatalog());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setChapter
     * 
     */
    public function testSetChapter()
    {
        $this->assertInstanceOf($this->class, $this->object->setChapter());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setDataset
     * 
     */
    public function testSetDataset()
    {
        $this->assertInstanceOf($this->class, $this->object->setDataset());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setDictionary
     * 
     */
    public function testSetDictionary()
    {
        $this->assertInstanceOf($this->class, $this->object->setDictionary());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setEncyclopedia
     * 
     */
    public function testSetEncyclopedia()
    {
        $this->assertInstanceOf($this->class, $this->object->setEncyclopedia());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setEntry
     * 
     */
    public function testSetEntry()
    {
        $this->assertInstanceOf($this->class, $this->object->setEntry());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setEntryDictionary
     * 
     */
    public function testSetEntryDictionary()
    {
        $this->assertInstanceOf($this->class, $this->object->setEntryDictionary());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setEntryEncyclopedia
     * 
     */
    public function testSetEntryEncyclopedia()
    {
        $this->assertInstanceOf($this->class, $this->object->setEntryEncyclopedia());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setFigure
     * 
     */
    public function testSetFigure()
    {
        $this->assertInstanceOf($this->class, $this->object->setFigure());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setGraphic
     * 
     */
    public function testSetGraphic()
    {
        $this->assertInstanceOf($this->class, $this->object->setGraphic());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setInterview
     * 
     */
    public function testSetInterview()
    {
        $this->assertInstanceOf($this->class, $this->object->setInterview());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setLegalCase
     * 
     */
    public function testSetLegalCase()
    {
        $this->assertInstanceOf($this->class, $this->object->setLegalCase());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setLegislation
     * 
     */
    public function testSetLegislation()
    {
        $this->assertInstanceOf($this->class, $this->object->setLegislation());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setManuscript
     * 
     */
    public function testSetManuscript()
    {
        $this->assertInstanceOf($this->class, $this->object->setManuscript());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setMap
     * 
     */
    public function testSetMap()
    {
        $this->assertInstanceOf($this->class, $this->object->setMap());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setMotionPicture
     * 
     */
    public function testSetMotionPicture()
    {
        $this->assertInstanceOf($this->class, $this->object->setMotionPicture());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setMusicalScore
     * 
     */
    public function testSetMusicalScore()
    {
        $this->assertInstanceOf($this->class, $this->object->setMusicalScore());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setPamphlet
     * 
     */
    public function testSetPamphlet()
    {
        $this->assertInstanceOf($this->class, $this->object->setPamphlet());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setConference
     * 
     */
    public function testSetConference()
    {
        $this->assertInstanceOf($this->class, $this->object->setConference());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setPaperConference
     * 
     */
    public function testSetPaperConference()
    {
        $this->assertInstanceOf($this->class, $this->object->setPaperConference());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setPatent
     * 
     */
    public function testSetPatent()
    {
        $this->assertInstanceOf($this->class, $this->object->setPatent());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setPersonalCommunication
     * 
     */
    public function testSetPersonalCommunication()
    {
        $this->assertInstanceOf($this->class, $this->object->setPersonalCommunication());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setPost
     * 
     */
    public function testSetPost()
    {
        $this->assertInstanceOf($this->class, $this->object->setPost());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setPostWeblog
     * 
     */
    public function testSetPostWeblog()
    {
        $this->assertInstanceOf($this->class, $this->object->setPostWeblog());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setReport
     * 
     */
    public function testSetReport()
    {
        $this->assertInstanceOf($this->class, $this->object->setReport());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setReview
     * 
     */
    public function testSetReview()
    {
        $this->assertInstanceOf($this->class, $this->object->setReview());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setReviewBook
     * 
     */
    public function testSetReviewBook()
    {
        $this->assertInstanceOf($this->class, $this->object->setReviewBook());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setSong
     * 
     */
    public function testSetSong()
    {
        $this->assertInstanceOf($this->class, $this->object->setSong());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setSpeech
     * 
     */
    public function testSetSpeech()
    {
        $this->assertInstanceOf($this->class, $this->object->setSpeech());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setThesis
     * 
     */
    public function testSetThesis()
    {
        $this->assertInstanceOf($this->class, $this->object->setThesis());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setTreaty
     * 
     */
    public function testSetTreaty()
    {
        $this->assertInstanceOf($this->class, $this->object->setTreaty());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setWebpage
     * 
     */
    public function testSetWebpage()
    {
        $this->assertInstanceOf($this->class, $this->object->setWebpage());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setUnknown
     * 
     */
    public function testSetUnknown()
    {
        $this->assertInstanceOf($this->class, $this->object->setUnknown());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setSlide
     */
    public function testSetSlide()
    {
        $this->assertInstanceOf($this->class, $this->object->setSlide());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setSoftware
     */
    public function testSetSoftware()
    {
        $this->assertInstanceOf($this->class, $this->object->setSoftware());
    }

    /**
     * @covers Geissler\Converter\Model\Type::setVideo
     */
    public function testSetVideo()
    {
        $this->assertInstanceOf($this->class, $this->object->setVideo());
    }

    /**
     * @covers Geissler\Converter\Model\Type::getType
     * 
     */
    public function testGetType()
    {
        $this->assertInstanceOf($this->class, $this->object->setArticle());
        $this->assertEquals('article', $this->object->getType());
    }
}
