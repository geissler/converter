<?php
namespace Geissler\Converter\Model;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-05 at 12:39:41.
 */
class DateTest extends \PHPUnit\Framework\TestCase
{
    /**
     * @var Date
     */
    protected $object;
    protected $class = '\Geissler\Converter\Model\Date';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Date;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Geissler\Converter\Model\Date::setDay
     */
    public function testSetDay()
    {
        $this->assertInstanceOf($this->class, $this->object->setDay(19));
    }

    /**
     * @covers Geissler\Converter\Model\Date::getDay
     */
    public function testGetDay()
    {
        $this->assertInstanceOf($this->class, $this->object->setDay(19));
        $this->assertEquals(19, $this->object->getDay());
    }

    /**
     * @covers Geissler\Converter\Model\Date::setHour
     */
    public function testSetHour()
    {
        $this->assertInstanceOf($this->class, $this->object->setHour(19));
    }

    /**
     * @covers Geissler\Converter\Model\Date::getHour
     */
    public function testGetHour()
    {
        $this->assertInstanceOf($this->class, $this->object->setHour(19));
        $this->assertEquals(19, $this->object->getHour());
    }

    /**
     * @covers Geissler\Converter\Model\Date::setMinute
     */
    public function testSetMinute()
    {
        $this->assertInstanceOf($this->class, $this->object->setMinute(23));
    }

    /**
     * @covers Geissler\Converter\Model\Date::getMinute
     */
    public function testGetMinute()
    {
        $this->assertInstanceOf($this->class, $this->object->setMinute(19));
        $this->assertEquals(19, $this->object->getMinute());
    }

    /**
     * @covers Geissler\Converter\Model\Date::setMonth
     */
    public function testSetMonth()
    {
        $this->assertInstanceOf($this->class, $this->object->setMonth(1));
    }

    /**
     * @covers Geissler\Converter\Model\Date::getMonth
     */
    public function testGetMonth()
    {
        $this->assertInstanceOf($this->class, $this->object->setMonth(10));
        $this->assertEquals(10, $this->object->getMonth());
    }

    /**
     * @covers Geissler\Converter\Model\Date::setSecond
     */
    public function testSetSecond()
    {
        $this->assertInstanceOf($this->class, $this->object->setSecond(19));
    }

    /**
     * @covers Geissler\Converter\Model\Date::getSecond
     */
    public function testGetSecond()
    {
        $this->assertInstanceOf($this->class, $this->object->setSecond(59));
        $this->assertEquals(59, $this->object->getSecond());
    }

    /**
     * @covers Geissler\Converter\Model\Date::setYear
     */
    public function testSetYear()
    {
        $this->assertInstanceOf($this->class, $this->object->setYear(1984));
    }

    /**
     * @covers Geissler\Converter\Model\Date::getYear
     */
    public function testGetYear()
    {
        $this->assertInstanceOf($this->class, $this->object->setYear(1984));
        $this->assertEquals(1984, $this->object->getYear());
    }

    /**
     * @covers Geissler\Converter\Model\Date::setSeason
     * @covers Geissler\Converter\Model\Date::getSeason
     */
    public function testSeason()
    {
        $this->assertInstanceOf($this->class, $this->object->setSeason('Spring'));
        $this->assertEquals('Spring', $this->object->getSeason());
    }
}
