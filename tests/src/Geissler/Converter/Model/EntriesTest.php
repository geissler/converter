<?php
namespace Geissler\Converter\Model;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-01 at 16:35:08.
 */
class EntriesTest extends \PHPUnit\Framework\TestCase
{
    /**
     * @var Entries
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Entries;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Geissler\Converter\Model\Entries::setEntry
     * @covers Geissler\Converter\Model\Container::setData
     */
    public function testSetEntry()
    {
        $this->assertInstanceOf('\Geissler\Converter\Model\Entries', $this->object->setEntry(new Entry()));
    }

    /**
     * @covers Geissler\Converter\Model\Container::getIterator
     */
    public function testGetIterator()
    {
        $this->assertInstanceOf('\Geissler\Converter\Model\Entries', $this->object->setEntry(new Entry()));
        $this->assertInstanceOf('\Geissler\Converter\Model\Entries', $this->object->setEntry(new Entry()));
        $this->assertInstanceOf('\ArrayIterator', $this->object->getIterator());

        foreach ($this->object as $child) {
            $this->assertInstanceOf('\Geissler\Converter\Model\Entry', $child);
        }
    }

    /**
     * @covers Geissler\Converter\Model\Container::__construct
     * @covers Geissler\Converter\Model\Container::offsetExists
     * @covers Geissler\Converter\Model\Container::offsetSet
     * @covers Geissler\Converter\Model\Container::offsetGet
     * @covers Geissler\Converter\Model\Container::offsetUnset
     */
    public function testArrayAccess()
    {
        $this->assertFalse(isset($this->object[0]));
        $this->object[0]    =   new Entry();
        $this->object[]     =   new Entry();
        $this->assertTrue(isset($this->object[1]));
        $this->assertInstanceOf('\Geissler\Converter\Model\Entry', $this->object[0]);
        $this->assertInstanceOf('\Geissler\Converter\Model\Entry', $this->object[1]);
        unset($this->object[1]);
        $this->assertFalse(isset($this->object[1]));
    }

    /**
     * @covers Geissler\Converter\Model\Container::offsetSet
     * 
     * @expectedException ErrorException
     */
    public function testDoNotSetNoneEntry()
    {
        $this->object[] =   true;
    }

    /**
     * @covers Geissler\Converter\Model\Container::count
     */
    public function testCount()
    {
        $this->assertEquals(0, count($this->object));
        $this->object[]    =   new Entry();
        $this->object[]    =   new Entry();
        $this->assertEquals(2, count($this->object));
    }
}
